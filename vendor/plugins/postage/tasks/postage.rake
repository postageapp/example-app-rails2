namespace :postage do
  
  desc 'Do the initial postage installation.'
  task :setup => :environment do
    
    if (key = ENV['API_KEY']).blank?
      print 'Please enter the API key: '
      key = STDIN.gets.gsub("\n", '')
    end
    
    filename = "#{Rails.root}/config/initializers/postage.rb"
    
    output = %{
# Specify the Postage API key
Postage.configure do |config|
  config.api_key = '#{key}'
end
}

    File.open(filename, 'w'){|file| file.write(output)}
    puts "Created intializer: #{filename}"
    puts "With the following content: \n#{output}"
  end
  
  desc 'Check current plugin configuration'
  task :current_config => :environment do
    config_accessors = [
      [:api_key,            '               API Key: '],
      [:api_version,        '           API Version: '],
      [:url,                'PostageApp Service URL: '],
      [:recipient_override, '    Recipient Override: ']
    ]
    
    config_accessors.each do |k, v|
      puts "#{v} #{Postage.send(k).inspect}"
    end
  end
  
  desc 'Verify postage plugin installation by requesting project info from PostageApp.com'
  task :test => :environment do 
    
    puts "Attempting to contact PostageApp..."
    response = Postage::Request.new(:get_project_info).call!
    
    unless response.blank?
      
      if response.success?
        project_name  = response.data[:project][:name]
        project_url   = response.data[:project][:url]
        user_emails   = response.data[:project][:users]
        
        puts %{
  Found Project:
  ----------------------------
   Name:  #{ project_name }
    URL:  #{ project_url }
  Users:  #{ user_emails.keys.join(', ') }
        }
        
        # Sending test email to all users in the project
        # Most likely a single user if it's a new project
        unless user_emails.empty?
          puts 'Sending test message to users in the project...'
          r = send_test_message(user_emails)
          if r && r.success?
            puts '  Message was successfully sent!'
            puts ''
            puts 'Your application is ready to use PostageApp!'
          else
            puts 'Failed to send test message. Please try again. Check logs if issue persists.'
          end
        else
          puts 'Seems that there are no users to send test message to. Aborting.'
        end
        
      else
        puts "Received unexpected response: #{response.response[:message]}"
        puts 'Check your configuration please.'
      end
      
    else
      puts 'Failed to recieve any type of response from PostageApp. Please try again.'
      puts 'Check logs if problem persists.'
    end
  end
  
end

HTML_MESSAGE = %{
<h3>
  Hello {{name}},
</h3>
<p>
  This is a html message generated by Postage plugin.
</p>
<p>
  If you received this message it means that your application is properly configured and is ready to use PostageApp service.
</p>
<p>
  Thank you,
</p>
<p>
  The PostageApp Team
</p>
}

TEXT_MESSAGE = %{
Hello {{name}}

This is a plain text message generated by Postage plugin.

If you received this message it means that your application is properly configured and is ready to use PostageApp service.

Thank you,

The PostageApp Team
}

def send_test_message(recipients)
  recipients_with_variables = {}
  recipients.each do |email, name|
    recipients_with_variables[email] = {'name' => name}
  end
  
  Postage.send_message(
    :message => {
      'text/html'  => HTML_MESSAGE,
      'text/plain' => TEXT_MESSAGE
    },
    :recipients => recipients_with_variables,
    :headers    => {
      'Subject' => '[Postage Plugin] Test Message',
      'From'    => 'no-return@postageapp.com'
    }
  )
end